/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef, useState } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'

type GLTFResult = GLTF & {
  nodes: {
    Mesh_Model001_24_GTAMtl_10_00_0002: THREE.Mesh
    BaseSpiderMan002: THREE.Mesh
    Mesh_Model001_24_GTAMtl_10_00_0004: THREE.Mesh
    Mesh_Model001_24_GTAMtl_10_00_0005: THREE.Mesh
    BaseSpiderMan005: THREE.Mesh
    Mesh_Model001_24_GTAMtl_10_00_0009: THREE.Mesh
    BaseSpiderMan009: THREE.Mesh
    Mesh_Model001_24_GTAMtl_10_00_0011: THREE.Mesh
    Mesh_Model001_24_GTAMtl_10_00_0012: THREE.Mesh
    BaseSpiderMan012: THREE.Mesh
    BaseSpiderMan013: THREE.Mesh
    BaseSpiderMan007: THREE.Mesh
    BaseSpiderMan014: THREE.Mesh
    BaseSpiderMan015: THREE.Mesh
    Mesh_Model001_24_GTAMtl_10_00_0018: THREE.Mesh
    Mesh_Model001_24_GTAMtl_10_00_0020: THREE.Mesh
    Mesh_Model001_24_GTAMtl_10_00_0021: THREE.Mesh
    BaseSpiderMan006: THREE.Mesh
  }
  materials: {
    ['Material.001']: THREE.MeshStandardMaterial
  }
}

interface Prop {
  goToStretch: ({part, body} : {part: string, body: string}) => void,
}

const Model: React.FC<Prop> = (proped, { ...props }: JSX.IntrinsicElements['group']) => {
  const group = useRef<THREE.Group>()
  const { nodes } = useGLTF('/assets/BaseSpiderMan.glb') as GLTFResult
  const { goToStretch } = proped;

  const [top, setTop] = useState(false);
  const [torso, setTorso] = useState(false);
  const [back, setBack] = useState(false);
  const [arms, setArms] = useState(false);
  const [legs, setLegs] = useState(false);

  return (
    <group ref={group} {...props} dispose={null}>
      {/* 頭・首・肩 */}
      {/* 頭 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.BaseSpiderMan013.geometry}
          material={nodes.BaseSpiderMan013.material}
          position={[0, 0, 1.1]}
          onClick={() => goToStretch({part : "top",  body : "首・肩"})}
          onPointerOver={() => {
            setTop(true);
          }}
          onPointerOut={() => {
            setTop(false);
          }}
        >
          <meshStandardMaterial color={top ? "#e7f1fb" : "#94c1ed"} />
        </mesh>

      </group>
      {/* 首 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_Model001_24_GTAMtl_10_00_0020.geometry}
          material={nodes.Mesh_Model001_24_GTAMtl_10_00_0020.material}
          position={[0, 0, 1.1]}
          onClick={() => goToStretch({part : "top", body : "首・肩"})}
          onPointerOver={() => {
            setTop(true);
          }}
          onPointerOut={() => {
            setTop(false);
          }}
        >
          <meshStandardMaterial color={top ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* 右肩 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.BaseSpiderMan015.geometry}
          material={nodes.BaseSpiderMan015.material}
          position={[0, 0, 1.1]}
          onClick={() => goToStretch({part : "top", body : "首・肩"})}
          onPointerOver={() => {
            setTop(true);
          }}
          onPointerOut={() => {
            setTop(false);
          }}
        >
          <meshStandardMaterial color={top ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* 左肩 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.BaseSpiderMan012.geometry}
          material={nodes.BaseSpiderMan012.material}
          position={[0, 0, 1.1]}
          onClick={() => goToStretch({part : "top", body : "首・肩"})}
          onPointerOver={() => {
            setTop(true);
          }}
          onPointerOut={() => {
            setTop(false);
          }}
        >
          <meshStandardMaterial color={top ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* ここまで */}

      {/* お腹周り */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_Model001_24_GTAMtl_10_00_0021.geometry}
          material={nodes.Mesh_Model001_24_GTAMtl_10_00_0021.material}
          position={[0, 0, 1.1]}
          onClick={() => goToStretch({part : "torso", body : "お腹周り"})}
          onPointerOver={() => {
            setTorso(true);
          }}
          onPointerOut={() => {
            setTorso(false);
          }}
        >
          <meshStandardMaterial color={torso ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>

      {/* 背中 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_Model001_24_GTAMtl_10_00_0018.geometry}
          material={nodes.Mesh_Model001_24_GTAMtl_10_00_0018.material}
          position={[0, 0, 1.1]}
          onClick={() => goToStretch({part : "back", body : "背中"})}
          onPointerOver={() => {
            setBack(true);
          }}
          onPointerOut={() => {
            setBack(false);
          }}
        >
          <meshStandardMaterial color={back ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>

      {/* 腕 */}
      {/* 左腕 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_Model001_24_GTAMtl_10_00_0011.geometry}
          material={nodes.Mesh_Model001_24_GTAMtl_10_00_0011.material}
          position={[0, 0, 1.1]}
          onClick={() => goToStretch({part : "arms", body : "腕・手"})}
          onPointerOver={() => {
            setArms(true);
          }}
          onPointerOut={() => {
            setArms(false);
          }}
        >
          <meshStandardMaterial color={arms ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_Model001_24_GTAMtl_10_00_0012.geometry}
          material={nodes.Mesh_Model001_24_GTAMtl_10_00_0012.material}
          position={[0, 0, 1.1]}
          onClick={() => goToStretch({part : "arms", body : "腕・手"})}
          onPointerOver={() => {
            setArms(true);
          }}
          onPointerOut={() => {
            setArms(false);
          }}
        >
          <meshStandardMaterial color={arms ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* 左手 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_Model001_24_GTAMtl_10_00_0009.geometry}
          material={nodes.Mesh_Model001_24_GTAMtl_10_00_0009.material}
          position={[0, 0, 1.1]}
          onClick={() => goToStretch({part : "arms", body : "腕・手"})}
          onPointerOver={() => {
            setArms(true);
          }}
          onPointerOut={() => {
            setArms(false);
          }}
        >
          <meshStandardMaterial color={arms ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* 右腕 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.BaseSpiderMan007.geometry}
          material={nodes.BaseSpiderMan007.material}
          position={[0, 0, 1.1]}
          onClick={() => goToStretch({part : "arms", body : "腕・手"})}
          onPointerOver={() => {
            setArms(true);
          }}
          onPointerOut={() => {
            setArms(false);
          }}
        >
          <meshStandardMaterial color={arms ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.BaseSpiderMan014.geometry}
          material={nodes.BaseSpiderMan014.material}
          position={[0, 0, 1.1]}
          onClick={() => goToStretch({part : "arms", body : "腕・手"})}
          onPointerOver={() => {
            setArms(true);
          }}
          onPointerOut={() => {
            setArms(false);
          }}
        >
          <meshStandardMaterial color={arms ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* 右手 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.BaseSpiderMan009.geometry}
          material={nodes.BaseSpiderMan009.material}
          position={[0, 0, 1.1]}
          onClick={() => goToStretch({part : "arms", body : "腕・手"})}
          onPointerOver={() => {
            setArms(true);
          }}
          onPointerOut={() => {
            setArms(false);
          }}
        >
          <meshStandardMaterial color={arms ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* ここまで */}

      {/* 脚 */}
      {/* 左太もも */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.BaseSpiderMan005.geometry}
          material={nodes.BaseSpiderMan005.material}
          position={[0, 0, 1.1]}
          onClick={() => goToStretch({part : "legs", body : "脚・腰"})}
          onPointerOver={() => {
            setLegs(true);
          }}
          onPointerOut={() => {
            setLegs(false);
          }}
        >
          <meshStandardMaterial color={legs ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* 左ふくらはぎ */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_Model001_24_GTAMtl_10_00_0004.geometry}
          material={nodes.Mesh_Model001_24_GTAMtl_10_00_0004.material}
          position={[0, 0, 1.1]}
          onClick={() => goToStretch({part : "legs", body : "脚・腰"})}
          onPointerOver={() => {
            setLegs(true);
          }}
          onPointerOut={() => {
            setLegs(false);
          }}
        >
          <meshStandardMaterial color={legs ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* 左足 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_Model001_24_GTAMtl_10_00_0002.geometry}
          material={nodes.Mesh_Model001_24_GTAMtl_10_00_0002.material}
          position={[0, 0, 1.1]}
          onClick={() => goToStretch({part : "legs", body : "脚・腰"})}
          onPointerOver={() => {
            setLegs(true);
          }}
          onPointerOut={() => {
            setLegs(false);
          }}
        >
          <meshStandardMaterial color={legs ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* 右太もも */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.BaseSpiderMan006.geometry}
          material={nodes.BaseSpiderMan006.material}
          position={[0, 0, 1.1]}
          onClick={() => goToStretch({part : "legs", body : "脚・腰"})}
          onPointerOver={() => {
            setLegs(true);
          }}
          onPointerOut={() => {
            setLegs(false);
          }}
        >
          <meshStandardMaterial color={legs ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* 右ふくらはぎ */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_Model001_24_GTAMtl_10_00_0005.geometry}
          material={nodes.Mesh_Model001_24_GTAMtl_10_00_0005.material}
          position={[0, 0, 1.1]}
          onClick={() => goToStretch({part : "legs", body : "脚・腰"})}
          onPointerOver={() => {
            setLegs(true);
          }}
          onPointerOut={() => {
            setLegs(false);
          }}
        >
          <meshStandardMaterial color={legs ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* 右足 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.BaseSpiderMan002.geometry}
          material={nodes.BaseSpiderMan002.material}
          position={[0, 0, 1.1]}
          onClick={() => goToStretch({part : "legs", body : "脚・腰"})}
          onPointerOver={() => {
            setLegs(true);
          }}
          onPointerOut={() => {
            setLegs(false);
          }}
        >
          <meshStandardMaterial color={legs ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* ここまで */}
    </group>
  )
}

useGLTF.preload('/assets/BaseSpiderMan.glb')

export default Model