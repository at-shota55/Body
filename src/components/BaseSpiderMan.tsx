/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef, useState } from 'react'
import { withRouter, useHistory } from 'react-router-dom'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three/examples/jsm/loaders/GLTFLoader'
import PropTypes from 'prop-types'

type GLTFResult = GLTF & {
  nodes: {
    Mesh_Model001_24_GTAMtl_10_00_0002: THREE.Mesh
    BaseSpiderMan002: THREE.Mesh
    Mesh_Model001_24_GTAMtl_10_00_0004: THREE.Mesh
    Mesh_Model001_24_GTAMtl_10_00_0005: THREE.Mesh
    BaseSpiderMan005: THREE.Mesh
    Mesh_Model001_24_GTAMtl_10_00_0009: THREE.Mesh
    BaseSpiderMan009: THREE.Mesh
    Mesh_Model001_24_GTAMtl_10_00_0011: THREE.Mesh
    Mesh_Model001_24_GTAMtl_10_00_0012: THREE.Mesh
    BaseSpiderMan012: THREE.Mesh
    BaseSpiderMan013: THREE.Mesh
    BaseSpiderMan007: THREE.Mesh
    BaseSpiderMan014: THREE.Mesh
    BaseSpiderMan015: THREE.Mesh
    Mesh_Model001_24_GTAMtl_10_00_0018: THREE.Mesh
    Mesh_Model001_24_GTAMtl_10_00_0020: THREE.Mesh
    Mesh_Model001_24_GTAMtl_10_00_0021: THREE.Mesh
    BaseSpiderMan006: THREE.Mesh
  }
  materials: {
    ['Material.001']: THREE.MeshStandardMaterial
  }
}

function Model({ ...props }: JSX.IntrinsicElements['group']) {
  const group = useRef<THREE.Group>()
  const { nodes } = useGLTF('/assets/BaseSpiderMan.glb') as GLTFResult

  const [head, setHead] = useState(false);
  const [neck, setNeck] = useState(false);
  const [torso, setTorso] = useState(false);
  const [back, setBack] = useState(false);
  const [leftShoulder, setLftShoulder] = useState(false);
  const [leftArm, setLeftArm] = useState(false);
  const [leftHand, setLeftHand] = useState(false);
  const [rightShoulder, setRightShoulder] = useState(false);
  const [rightArm, setRightArm] = useState(false);
  const [rightHand, setRightHand] = useState(false);
  const [leftThigh, setLeftThigh] = useState(false);
  const [leftCalf, setLeftCalf] = useState(false);
  const [leftFoot, setLeftFoot] = useState(false);
  const [rightThigh, setRightThigh] = useState(false);
  const [rightCalf, setRightCalf] = useState(false);
  const [rightFoot, setRightFoot] = useState(false);

  let history = useHistory();
  function move(){
    history.push({
      pathname: "/stretch"
    }); // 画面遷移
  };

  return (
    <group ref={group} {...props} dispose={null}>
      {/* 頭 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.BaseSpiderMan013.geometry}
          material={nodes.BaseSpiderMan013.material}
          position={[0, 0, 1.1]}
          onClick={move}
          onPointerOver={() => {
            setHead(true);
          }}
          onPointerOut={() => {
            setHead(false);
          }}
        >
          <meshStandardMaterial color={head ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
        {/* 首 */}
        <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_Model001_24_GTAMtl_10_00_0020.geometry}
          material={nodes.Mesh_Model001_24_GTAMtl_10_00_0020.material}
          position={[0, 0, 1.1]}
          onClick={move}
          onPointerOver={() => {
            setNeck(true);
          }}
          onPointerOut={() => {
            setNeck(false);
          }}
        >
          <meshStandardMaterial color={neck ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* 前胴体 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_Model001_24_GTAMtl_10_00_0021.geometry}
          material={nodes.Mesh_Model001_24_GTAMtl_10_00_0021.material}
          position={[0, 0, 1.1]}
          onClick={move}
          onPointerOver={() => {
            setTorso(true);
          }}
          onPointerOut={() => {
            setTorso(false);
          }}
        >
          <meshStandardMaterial color={torso ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* 背中 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_Model001_24_GTAMtl_10_00_0018.geometry}
          material={nodes.Mesh_Model001_24_GTAMtl_10_00_0018.material}
          position={[0, 0, 1.1]}
          onClick={move}
          onPointerOver={() => {
            setBack(true);
          }}
          onPointerOut={() => {
            setBack(false);
          }}
        >
          <meshStandardMaterial color={back ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* 左肩 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.BaseSpiderMan012.geometry}
          material={nodes.BaseSpiderMan012.material}
          position={[0, 0, 1.1]}
          onClick={move}
          onPointerOver={() => {
            setLftShoulder(true);
          }}
          onPointerOut={() => {
            setLftShoulder(false);
          }}
        >
          <meshStandardMaterial color={leftShoulder ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* 左腕 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_Model001_24_GTAMtl_10_00_0011.geometry}
          material={nodes.Mesh_Model001_24_GTAMtl_10_00_0011.material}
          position={[0, 0, 1.1]}
          onClick={move}
          onPointerOver={() => {
            setLeftArm(true);
          }}
          onPointerOut={() => {
            setLeftArm(false);
          }}
        >
          <meshStandardMaterial color={leftArm ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_Model001_24_GTAMtl_10_00_0012.geometry}
          material={nodes.Mesh_Model001_24_GTAMtl_10_00_0012.material}
          position={[0, 0, 1.1]}
          onClick={move}
          onPointerOver={() => {
            setLeftArm(true);
          }}
          onPointerOut={() => {
            setLeftArm(false);
          }}
        >
          <meshStandardMaterial color={leftArm ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* ここまで */}
      {/* 左手 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_Model001_24_GTAMtl_10_00_0009.geometry}
          material={nodes.Mesh_Model001_24_GTAMtl_10_00_0009.material}
          position={[0, 0, 1.1]}
          onClick={move}
          onPointerOver={() => {
            setLeftHand(true);
          }}
          onPointerOut={() => {
            setLeftHand(false);
          }}
        >
          <meshStandardMaterial color={leftHand ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* 右肩 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.BaseSpiderMan015.geometry}
          material={nodes.BaseSpiderMan015.material}
          position={[0, 0, 1.1]}
          onClick={move}
          onPointerOver={() => {
            setRightShoulder(true);
          }}
          onPointerOut={() => {
            setRightShoulder(false);
          }}
        >
          <meshStandardMaterial color={rightShoulder ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* 右腕 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.BaseSpiderMan007.geometry}
          material={nodes.BaseSpiderMan007.material}
          position={[0, 0, 1.1]}
          onClick={move}
          onPointerOver={() => {
            setRightArm(true);
          }}
          onPointerOut={() => {
            setRightArm(false);
          }}
        >
          <meshStandardMaterial color={rightArm ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.BaseSpiderMan014.geometry}
          material={nodes.BaseSpiderMan014.material}
          position={[0, 0, 1.1]}
          onClick={move}
          onPointerOver={() => {
            setRightArm(true);
          }}
          onPointerOut={() => {
            setRightArm(false);
          }}
        >
          <meshStandardMaterial color={rightArm ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* ここまで */}
      {/* 右手 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.BaseSpiderMan009.geometry}
          material={nodes.BaseSpiderMan009.material}
          position={[0, 0, 1.1]}
          onClick={move}
          onPointerOver={() => {
            setRightHand(true);
          }}
          onPointerOut={() => {
            setRightHand(false);
          }}
        >
          <meshStandardMaterial color={rightHand ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* 左太もも */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.BaseSpiderMan005.geometry}
          material={nodes.BaseSpiderMan005.material}
          position={[0, 0, 1.1]}
          onClick={move}
            onPointerOver={() => {
              setLeftThigh(true);
            }}
            onPointerOut={() => {
              setLeftThigh(false);
            }}
          >
            <meshStandardMaterial color={leftThigh ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* 左ふくらはぎ */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_Model001_24_GTAMtl_10_00_0004.geometry}
          material={nodes.Mesh_Model001_24_GTAMtl_10_00_0004.material}
          position={[0, 0, 1.1]}
          onClick={move}
          onPointerOver={() => {
            setLeftCalf(true);
          }}
          onPointerOut={() => {
            setLeftCalf(false);
          }}
        >
          <meshStandardMaterial color={leftCalf ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* 左足 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_Model001_24_GTAMtl_10_00_0002.geometry}
          material={nodes.Mesh_Model001_24_GTAMtl_10_00_0002.material}
          position={[0, 0, 1.1]}
          onClick={move}
          onPointerOver={() => {
            setLeftFoot(true);
          }}
          onPointerOut={() => {
            setLeftFoot(false);
          }}
        >
          <meshStandardMaterial color={leftFoot ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* 右太もも */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.BaseSpiderMan006.geometry}
          material={nodes.BaseSpiderMan006.material}
          position={[0, 0, 1.1]}
          onClick={move}
          onPointerOver={() => {
            setRightThigh(true);
          }}
          onPointerOut={() => {
            setRightThigh(false);
          }}
        >
          <meshStandardMaterial color={rightThigh ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* 右ふくらはぎ */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Mesh_Model001_24_GTAMtl_10_00_0005.geometry}
          material={nodes.Mesh_Model001_24_GTAMtl_10_00_0005.material}
          position={[0, 0, 1.1]}
          onClick={move}
          onPointerOver={() => {
            setRightCalf(true);
          }}
          onPointerOut={() => {
            setRightCalf(false);
          }}
        >
          <meshStandardMaterial color={rightCalf ? "#e7f1fb" : "#94c1ed"} />
        </mesh>
      </group>
      {/* 右足 */}
      <group rotation={[Math.PI / 2, 0, 0]} scale={2.7}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.BaseSpiderMan002.geometry}
          material={nodes.BaseSpiderMan002.material}
          position={[0, 0, 1.1]}
          onClick={move}
            onPointerOver={() => {
              setRightFoot(true);
            }}
            onPointerOut={() => {
              setRightFoot(false);
            }}
          >
            <meshStandardMaterial color={rightFoot ? "#e7f1fb" : "#94c1ed"} />
          </mesh>
      </group>
    </group>
  )
}

useGLTF.preload('/assets/BaseSpiderMan.glb')

export default Model